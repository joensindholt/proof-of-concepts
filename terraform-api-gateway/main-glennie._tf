terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
    databricks = {
      source  = "databrickslabs/databricks"
      version = "0.5.7"
    }

  }
}
provider "databricks" {
  host  = "https://an2-dev-use1-databricks01.cloud.databricks.com"
  token = "dapi302aa867bf38ef055e361bab51840e91"
}

provider "aws" {
  profile = "dev"
  region  = "us-east-1"
}

resource "databricks_mlflow_webhook" "url" {
  events      = ["REGISTERED_MODEL_CREATED"]
  description = "URL webhook trigger"
  http_url_spec {
    url = aws_apigatewayv2_api.databricks-webhook-api.api_endpoint
  }
}

data "aws_iam_policy_document" "lambda_assume_role" {
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

resource "aws_iam_role" "databricks-webhook-lambda-role" {
  name               = "tf_${var.env}-${var.region_short}-databricks-webhook-lambda-role"
  assume_role_policy = data.aws_iam_policy_document.lambda_assume_role.json
}

resource "aws_iam_policy" "databricks-webhook-lambda-policy" {
  name   = "${var.env}-${var.region_short}-databricks-webhook-lambda-policy"
  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:*",
                "s3-object-lambda:*",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "lambda:InvokeFunction",
                "cloudformation:DescribeStacks",
                "cloudformation:ListStackResources",
                "cloudwatch:ListMetrics",
                "cloudwatch:GetMetricData",
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "kms:ListAliases",
                "iam:GetPolicy",
                "iam:GetPolicyVersion",
                "iam:GetRole",
                "iam:GetRolePolicy",
                "iam:ListAttachedRolePolicies",
                "iam:ListRolePolicies",
                "iam:ListRoles",
                "lambda:*",
                "logs:DescribeLogGroups",
                "states:DescribeStateMachine",
                "states:ListStateMachines",
                "tag:GetResources",
                "xray:GetTraceSummaries",
                "xray:BatchGetTraces"
            ],
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": "iam:PassRole",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "logs:DescribeLogStreams",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
            ],
            "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
        }
    ]
}
EOF
}

resource "aws_iam_role_policy_attachment" "databricks-webhook-lambda-policy" {
  role       = aws_iam_role.databricks-webhook-lambda-role.name
  policy_arn = aws_iam_policy.databricks-webhook-lambda-policy.arn
}

resource "aws_apigatewayv2_api" "databricks-webhook-api" {
  name          = "databricks-webhook-api"
  protocol_type = "HTTP"
}

resource "aws_apigatewayv2_stage" "databricks-webhook-api-stage" {
  api_id      = aws_apigatewayv2_api.databricks-webhook-api.id
  name        = "default-stage"
  auto_deploy = true
  access_log_settings {
    destination_arn = aws_cloudwatch_log_group.databricks-webhook-api-cloudwatch-access-log.arn
    format          = "$context.identity.sourceIp - - [$context.requestTime] \"$context.httpMethod $context.routeKey $context.protocol\" $context.status $context.responseLength $context.requestId $context.integrationErrorMessage"
  }
}

resource "null_resource" "npm_install" {
  provisioner "local-exec" {
    command = "cd ../lambda && npm install"
  }

  triggers = {
    rerun_every_time = "${uuid()}"
  }
}

data "null_data_source" "wait_for_npm_install" {
  inputs = {
    lambda_dependency_id = "${null_resource.npm_install.id}"
    source_dir           = "../lambda"
  }
}

data "archive_file" "lambda_package" {
  output_path = "${path.module}/lambda-files_${data.null_data_source.wait_for_npm_install.outputs["lambda_dependency_id"]}.zip"
  source_dir  = data.null_data_source.wait_for_npm_install.outputs["source_dir"]
  type        = "zip"
}

resource "aws_s3_object" "lambda_package_upload" {
  bucket = var.rqi-assets-bucket
  key    = "lambda-archives/model-engine/lambda-files_${data.archive_file.lambda_package.output_md5}.zip"
  source = data.archive_file.lambda_package.output_path
}


module "lambda_function" {
  source  = "terraform-aws-modules/lambda/aws"
  version = "2.36.0"

  function_name = "databricks-webhook-api-gateway-lambda"
  description   = "databricks-webhook-api-gateway-lambda"
  handler       = "databricks-webhook.handler"
  runtime       = "nodejs14.x"

  lambda_role    = "arn:aws:iam::${var.aws_account}:role/${aws_iam_role.databricks-webhook-lambda-role.name}"
  create_role    = false
  create_package = false

  s3_existing_package = {
    bucket = aws_s3_object.lambda_package_upload.bucket
    key    = aws_s3_object.lambda_package_upload.key
  }

  allowed_triggers = {
    APIGatewayAny = {
      service    = "apigateway"
      source_arn = aws_apigatewayv2_api.databricks-webhook-api.arn
    }
  }
  publish = true

  environment_variables = {

  }

}

resource "aws_lambda_permission" "allow_api_gateway" {
  function_name = module.lambda_function.lambda_function_name
  statement_id  = "apigateway-invoke-permissions"
  action        = "lambda:InvokeFunction"
  principal     = "apigateway.amazonaws.com"
  source_arn    = join("", [aws_apigatewayv2_api.databricks-webhook-api.execution_arn, "/*"])
}

resource "aws_apigatewayv2_integration" "databricks-webhook-api-gateway-integration" {
  api_id           = aws_apigatewayv2_api.databricks-webhook-api.id
  integration_type = "AWS_PROXY"

  #connection_type = "INTERNET"
  #content_handling_strategy = "CONVERT_TO_TEXT"
  description        = "Lambda integration"
  integration_method = "POST"
  integration_uri    = module.lambda_function.lambda_function_invoke_arn
  ##passthrough_behavior   = "WHEN_NO_MATCH"
  payload_format_version = "2.0"
}

resource "aws_apigatewayv2_route" "databricks-webhook-api-gateway-route" {
  api_id    = aws_apigatewayv2_api.databricks-webhook-api.id
  route_key = "POST /test"

  target = "integrations/${aws_apigatewayv2_integration.databricks-webhook-api-gateway-integration.id}"
}

output "api_execution_arn" {
  value = aws_apigatewayv2_api.databricks-webhook-api.execution_arn
}

output "api_endpoint" {
  value = aws_apigatewayv2_api.databricks-webhook-api.api_endpoint
}

######################################################
# Add access logging
######################################################

resource "aws_api_gateway_account" "databricks-webhook-api-account" {
  cloudwatch_role_arn = aws_iam_role.cloudwatch.arn
}

resource "aws_iam_role" "databricks-webhook-api-role" {
  name = "databricks-webhook-api-role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "apigateway.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

resource "aws_iam_role_policy" "databricks-webhook-api-cloudwatch-policy" {
  name = "databricks-webhook-api-cloudwatch-policy"
  role = aws_iam_role.databricks-webhook-api-role.id

  policy = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
            ],
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_cloudwatch_log_group" "databricks-webhook-api-cloudwatch-access-log" {
  name              = "databricks-webhook-api-cloudwatch-access-log"
  retention_in_days = 3
}
